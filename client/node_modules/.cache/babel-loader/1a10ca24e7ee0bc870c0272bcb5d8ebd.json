{"ast":null,"code":"import axios from 'axios';\nexport class ApiService {\n  constructor() {\n    var _localStorage$getItem;\n\n    this.api = void 0;\n    this.api = axios.create({\n      baseURL: (_localStorage$getItem = localStorage.getItem('apiUrl')) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : 'http://localhost:9094'\n    });\n  }\n\n  get apiUrl() {\n    var _this$api$defaults$ba;\n\n    return (_this$api$defaults$ba = this.api.defaults.baseURL) !== null && _this$api$defaults$ba !== void 0 ? _this$api$defaults$ba : '';\n  }\n\n  set apiUrl(url) {\n    localStorage.setItem('apiUrl', url);\n    this.api = axios.create({\n      baseURL: url\n    });\n  }\n\n  getList() {\n    return this.api.get('/allocations?filter=all').then(r => r.data);\n  }\n\n  getId() {\n    return this.api.get('/id').then(r => r.data);\n  }\n\n  update(from, to, options) {\n    return this.api.post(`/pins/ipfs/${to}?mode=recursive&pin-update=${from}&${this.mapOptions(options)}`).then(r => {});\n  }\n\n  add(cid, options) {\n    return this.api.post(`/pins/ipfs/${cid}?${this.mapOptions(options)}`);\n  }\n\n  remove(cid) {\n    return this.api.delete(`/pins/${cid}`).then(r => {});\n  }\n\n  status(cid) {\n    return this.api.get(`/pins/${cid}?local=false`).then(r => r.data);\n  }\n\n  getPeers() {\n    return this.api.get('/peers').then(r => r.data);\n  }\n\n  mapOptions(o) {\n    const pairs = [];\n    if (o.name) pairs.push(`name=${o.name}`);\n    if (o.maxReplication) pairs.push(`replication-max=${o.maxReplication}`);\n    if (o.minReplication) pairs.push(`replication-min=${o.minReplication}`);\n    if (o.shardSize) pairs.push(`shard-size=${o.shardSize}`);\n    return pairs.join('&');\n  }\n\n}","map":{"version":3,"sources":["D:/ipfs/cluster-webui/client/src/context/ApiService.ts"],"names":["axios","ApiService","constructor","api","create","baseURL","localStorage","getItem","apiUrl","defaults","url","setItem","getList","get","then","r","data","getId","update","from","to","options","post","mapOptions","add","cid","remove","delete","status","getPeers","o","pairs","name","push","maxReplication","minReplication","shardSize","join"],"mappings":"AAAA,OAAOA,KAAP,MAAmC,OAAnC;AAIA,OAAO,MAAMC,UAAN,CAAwC;AAG9CC,EAAAA,WAAW,GAAG;AAAA;;AAAA,SAFNC,GAEM;AACb,SAAKA,GAAL,GAAWH,KAAK,CAACI,MAAN,CAAa;AACvBC,MAAAA,OAAO,2BAAEC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAF,yEAAoC;AADpB,KAAb,CAAX;AAGA;;AAES,MAANC,MAAM,GAAW;AAAA;;AACpB,oCAAO,KAAKL,GAAL,CAASM,QAAT,CAAkBJ,OAAzB,yEAAoC,EAApC;AACA;;AAES,MAANG,MAAM,CAACE,GAAD,EAAc;AACvBJ,IAAAA,YAAY,CAACK,OAAb,CAAqB,QAArB,EAA+BD,GAA/B;AACA,SAAKP,GAAL,GAAWH,KAAK,CAACI,MAAN,CAAa;AACvBC,MAAAA,OAAO,EAAEK;AADc,KAAb,CAAX;AAGA;;AAEDE,EAAAA,OAAO,GAAG;AACT,WAAO,KAAKT,GAAL,CAASU,GAAT,CAAa,yBAAb,EACLC,IADK,CACAC,CAAC,IAAIA,CAAC,CAACC,IADP,CAAP;AAEA;;AAEDC,EAAAA,KAAK,GAAG;AACP,WAAO,KAAKd,GAAL,CAASU,GAAT,CAAa,KAAb,EACLC,IADK,CACAC,CAAC,IAAIA,CAAC,CAACC,IADP,CAAP;AAEA;;AAEDE,EAAAA,MAAM,CAACC,IAAD,EAAeC,EAAf,EAA2BC,OAA3B,EAAgD;AACrD,WAAO,KAAKlB,GAAL,CAASmB,IAAT,CAAe,cAAaF,EAAG,8BAA6BD,IAAK,IAAG,KAAKI,UAAL,CAAgBF,OAAhB,CAAyB,EAA7F,EAAgGP,IAAhG,CAAqGC,CAAC,IAAI,CAChH,CADM,CAAP;AAEA;;AAEDS,EAAAA,GAAG,CAACC,GAAD,EAAcJ,OAAd,EAAmC;AACrC,WAAO,KAAKlB,GAAL,CAASmB,IAAT,CAAe,cAAaG,GAAI,IAAG,KAAKF,UAAL,CAAgBF,OAAhB,CAAyB,EAA5D,CAAP;AACA;;AAEDK,EAAAA,MAAM,CAACD,GAAD,EAAc;AACnB,WAAO,KAAKtB,GAAL,CAASwB,MAAT,CAAiB,SAAQF,GAAI,EAA7B,EAAgCX,IAAhC,CAAqCC,CAAC,IAAI,CAChD,CADM,CAAP;AAEA;;AAEDa,EAAAA,MAAM,CAACH,GAAD,EAAc;AACnB,WAAO,KAAKtB,GAAL,CAASU,GAAT,CAAc,SAAQY,GAAI,cAA1B,EAAyCX,IAAzC,CAA8CC,CAAC,IAAIA,CAAC,CAACC,IAArD,CAAP;AACA;;AAEDa,EAAAA,QAAQ,GAAiB;AACxB,WAAO,KAAK1B,GAAL,CAASU,GAAT,CAAa,QAAb,EAAuBC,IAAvB,CAA4BC,CAAC,IAAIA,CAAC,CAACC,IAAnC,CAAP;AACA;;AAEOO,EAAAA,UAAU,CAACO,CAAD,EAAwB;AACzC,UAAMC,KAAK,GAAG,EAAd;AACA,QAAID,CAAC,CAACE,IAAN,EAAYD,KAAK,CAACE,IAAN,CAAY,QAAOH,CAAC,CAACE,IAAK,EAA1B;AACZ,QAAIF,CAAC,CAACI,cAAN,EAAsBH,KAAK,CAACE,IAAN,CAAY,mBAAkBH,CAAC,CAACI,cAAe,EAA/C;AACtB,QAAIJ,CAAC,CAACK,cAAN,EAAsBJ,KAAK,CAACE,IAAN,CAAY,mBAAkBH,CAAC,CAACK,cAAe,EAA/C;AACtB,QAAIL,CAAC,CAACM,SAAN,EAAiBL,KAAK,CAACE,IAAN,CAAY,cAAaH,CAAC,CAACM,SAAU,EAArC;AACjB,WAAOL,KAAK,CAACM,IAAN,CAAW,GAAX,CAAP;AACA;;AA3D6C","sourcesContent":["import axios, {AxiosInstance} from 'axios';\r\nimport {PinOptions} from '../types/PinOptions';\r\nimport {IApiContext} from './ApiContext';\r\n\r\nexport class ApiService implements IApiContext {\r\n\tprivate api: AxiosInstance;\r\n\r\n\tconstructor() {\r\n\t\tthis.api = axios.create({\r\n\t\t\tbaseURL: localStorage.getItem('apiUrl') ?? 'http://localhost:9094',\r\n\t\t});\r\n\t}\r\n\r\n\tget apiUrl(): string {\r\n\t\treturn this.api.defaults.baseURL ?? '';\r\n\t}\r\n\r\n\tset apiUrl(url: string) {\r\n\t\tlocalStorage.setItem('apiUrl', url);\r\n\t\tthis.api = axios.create({\r\n\t\t\tbaseURL: url,\r\n\t\t});\r\n\t}\r\n\r\n\tgetList() {\r\n\t\treturn this.api.get('/allocations?filter=all')\r\n\t\t\t.then(r => r.data);\r\n\t}\r\n\r\n\tgetId() {\r\n\t\treturn this.api.get('/id')\r\n\t\t\t.then(r => r.data);\r\n\t}\r\n\r\n\tupdate(from: string, to: string, options: PinOptions) {\r\n\t\treturn this.api.post(`/pins/ipfs/${to}?mode=recursive&pin-update=${from}&${this.mapOptions(options)}`).then(r => {\r\n\t\t});\r\n\t}\r\n\r\n\tadd(cid: string, options: PinOptions) {\r\n\t\treturn this.api.post(`/pins/ipfs/${cid}?${this.mapOptions(options)}`);\r\n\t}\r\n\r\n\tremove(cid: string) {\r\n\t\treturn this.api.delete(`/pins/${cid}`).then(r => {\r\n\t\t});\r\n\t}\r\n\r\n\tstatus(cid: string) {\r\n\t\treturn this.api.get(`/pins/${cid}?local=false`).then(r => r.data);\r\n\t}\r\n\r\n\tgetPeers(): Promise<any> {\r\n\t\treturn this.api.get('/peers').then(r => r.data);\r\n\t}\r\n\r\n\tprivate mapOptions(o: PinOptions): string {\r\n\t\tconst pairs = [];\r\n\t\tif (o.name) pairs.push(`name=${o.name}`);\r\n\t\tif (o.maxReplication) pairs.push(`replication-max=${o.maxReplication}`);\r\n\t\tif (o.minReplication) pairs.push(`replication-min=${o.minReplication}`);\r\n\t\tif (o.shardSize) pairs.push(`shard-size=${o.shardSize}`);\r\n\t\treturn pairs.join('&');\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
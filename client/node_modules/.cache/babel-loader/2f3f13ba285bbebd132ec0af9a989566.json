{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"autoFocus\", \"children\", \"component\", \"defaultListboxOpen\", \"defaultValue\", \"disabled\", \"getSerializedValue\", \"listboxId\", \"listboxOpen\", \"name\", \"onChange\", \"onListboxOpenChange\", \"optionStringifier\", \"renderValue\", \"slotProps\", \"slots\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef, unstable_useControlled as useControlled } from '@mui/utils';\nimport { flattenOptionGroups, getOptionsFromChildren } from '../SelectUnstyled/utils';\nimport useSelect from '../SelectUnstyled/useSelect';\nimport { useSlotProps } from '../utils';\nimport PopperUnstyled from '../PopperUnstyled';\nimport { SelectUnstyledContext } from '../SelectUnstyled/SelectUnstyledContext';\nimport composeClasses from '../composeClasses';\nimport { getSelectUnstyledUtilityClass } from '../SelectUnstyled/selectUnstyledClasses';\nimport defaultOptionStringifier from '../SelectUnstyled/defaultOptionStringifier';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction defaultRenderMultipleValues(selectedOptions) {\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: selectedOptions.map(o => o.label).join(', ')\n  });\n}\n\nfunction defaultFormValueProvider(selectedOptions) {\n  if (selectedOptions.length === 0) {\n    return '';\n  }\n\n  if (selectedOptions.every(o => typeof o.value === 'string' || typeof o.value === 'number' || typeof o.value === 'boolean')) {\n    return selectedOptions.map(o => String(o.value));\n  }\n\n  return JSON.stringify(selectedOptions.map(o => o.value));\n}\n\nfunction useUtilityClasses(ownerState) {\n  const {\n    active,\n    disabled,\n    open,\n    focusVisible\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active', open && 'expanded'],\n    listbox: ['listbox', disabled && 'disabled'],\n    popper: ['popper']\n  };\n  return composeClasses(slots, getSelectUnstyledUtilityClass, {});\n}\n/**\n * The foundation for building custom-styled multi-selection select components.\n *\n * Demos:\n *\n * - [Unstyled Select](https://mui.com/base/react-select/)\n *\n * API:\n *\n * - [MultiSelectUnstyled API](https://mui.com/base/api/multi-select-unstyled/)\n */\n\n\nconst MultiSelectUnstyled = /*#__PURE__*/React.forwardRef(function MultiSelectUnstyled(props, forwardedRef) {\n  var _ref, _slots$listbox, _slots$popper;\n\n  const {\n    autoFocus,\n    children,\n    component,\n    defaultListboxOpen = false,\n    defaultValue = [],\n    disabled: disabledProp,\n    getSerializedValue = defaultFormValueProvider,\n    listboxId,\n    listboxOpen: listboxOpenProp,\n    name,\n    onChange,\n    onListboxOpenChange,\n    optionStringifier = defaultOptionStringifier,\n    renderValue: renderValueProp,\n    slotProps = {},\n    slots = {},\n    value: valueProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const renderValue = renderValueProp != null ? renderValueProp : defaultRenderMultipleValues;\n  const [groupedOptions, setGroupedOptions] = React.useState([]);\n  const options = React.useMemo(() => flattenOptionGroups(groupedOptions), [groupedOptions]);\n  const [listboxOpen, setListboxOpen] = useControlled({\n    controlled: listboxOpenProp,\n    default: defaultListboxOpen,\n    name: 'MultiSelectUnstyled',\n    state: 'listboxOpen'\n  });\n  React.useEffect(() => {\n    setGroupedOptions(getOptionsFromChildren(children));\n  }, [children]);\n  const [buttonDefined, setButtonDefined] = React.useState(false);\n  const buttonRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const Button = (_ref = component != null ? component : slots.root) != null ? _ref : 'button';\n  const ListboxRoot = (_slots$listbox = slots.listbox) != null ? _slots$listbox : 'ul';\n  const Popper = (_slots$popper = slots.popper) != null ? _slots$popper : PopperUnstyled;\n  const handleButtonRefChange = React.useCallback(element => {\n    setButtonDefined(element != null);\n  }, []);\n  const handleButtonRef = useForkRef(forwardedRef, buttonRef, handleButtonRefChange);\n  React.useEffect(() => {\n    if (autoFocus) {\n      buttonRef.current.focus();\n    }\n  }, [autoFocus]);\n\n  const handleOpenChange = isOpen => {\n    setListboxOpen(isOpen);\n    onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);\n  };\n\n  const {\n    buttonActive,\n    buttonFocusVisible,\n    disabled,\n    getButtonProps,\n    getListboxProps,\n    getOptionProps,\n    getOptionState,\n    value\n  } = useSelect({\n    buttonRef: handleButtonRef,\n    defaultValue,\n    disabled: disabledProp,\n    listboxId,\n    multiple: true,\n    onChange,\n    onOpenChange: handleOpenChange,\n    open: listboxOpen,\n    options,\n    optionStringifier,\n    value: valueProp\n  });\n\n  const ownerState = _extends({}, props, {\n    active: buttonActive,\n    defaultListboxOpen,\n    disabled,\n    focusVisible: buttonFocusVisible,\n    open: listboxOpen,\n    renderValue,\n    value\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const selectedOptions = React.useMemo(() => {\n    if (value == null) {\n      return [];\n    }\n\n    return options.filter(o => value.includes(o.value));\n  }, [options, value]);\n  const buttonProps = useSlotProps({\n    elementType: Button,\n    getSlotProps: getButtonProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    ownerState,\n    className: classes.root\n  });\n  const listboxProps = useSlotProps({\n    elementType: ListboxRoot,\n    getSlotProps: getListboxProps,\n    externalSlotProps: slotProps.listbox,\n    additionalProps: {\n      ref: listboxRef\n    },\n    ownerState,\n    className: classes.listbox\n  });\n  const popperProps = useSlotProps({\n    elementType: Popper,\n    externalSlotProps: slotProps.popper,\n    additionalProps: {\n      anchorEl: buttonRef.current,\n      disablePortal: true,\n      open: listboxOpen,\n      placement: 'bottom-start',\n      role: undefined\n    },\n    ownerState,\n    className: classes.popper\n  });\n  const context = {\n    getOptionProps,\n    getOptionState,\n    listboxRef\n  };\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Button, _extends({}, buttonProps, {\n      children: renderValue(selectedOptions)\n    })), buttonDefined && /*#__PURE__*/_jsx(Popper, _extends({}, popperProps, {\n      children: /*#__PURE__*/_jsx(ListboxRoot, _extends({}, listboxProps, {\n        children: /*#__PURE__*/_jsx(SelectUnstyledContext.Provider, {\n          value: context,\n          children: children\n        })\n      }))\n    })), name && /*#__PURE__*/_jsx(\"input\", {\n      type: \"hidden\",\n      name: name,\n      value: getSerializedValue(selectedOptions)\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? MultiSelectUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the select element is focused during the first mount\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the select will be initially open.\n   * @default false\n   */\n  defaultListboxOpen: PropTypes.bool,\n\n  /**\n   * The default selected values. Use when the component is not controlled.\n   * @default []\n   */\n  defaultValue: PropTypes.array,\n\n  /**\n   * If `true`, the select is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * A function to convert the currently selected values to a type accepted by HTML input.\n   * Used to set a value of a hidden input associated with the select,\n   * so that the selected values can be posted with a form.\n   */\n  getSerializedValue: PropTypes.func,\n\n  /**\n   * `id` attribute of the listbox element.\n   * Also used to derive the `id` attributes of options.\n   */\n  listboxId: PropTypes.string,\n\n  /**\n   * Controls the open state of the select's listbox.\n   * @default undefined\n   */\n  listboxOpen: PropTypes.bool,\n\n  /**\n   * Name of the element. For example used by the server to identify the fields in form submits.\n   * If the name is provided, the component will render a hidden input element that can be submitted to a server.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when an option is selected.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see listboxOpen).\n   */\n  onListboxOpenChange: PropTypes.func,\n\n  /**\n   * A function used to convert the option label to a string.\n   * It's useful when labels are elements and need to be converted to plain text\n   * to enable navigation using character keys on a keyboard.\n   *\n   * @default defaultOptionStringifier\n   */\n  optionStringifier: PropTypes.func,\n\n  /**\n   * Function that customizes the rendering of the selected values.\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * The props used for each slot inside the MultiSelect.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the MultiSelect.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .shape({\n    listbox: PropTypes.elementType,\n    popper: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n\n  /**\n   * The selected values.\n   * Set to an empty array to deselect all options.\n   */\n  value: PropTypes.array\n} : void 0;\nexport default MultiSelectUnstyled;","map":{"version":3,"sources":["D:/ipfs/cluster-webui/.yarn/__virtual__/@mui-base-virtual-988448c64e/0/cache/@mui-base-npm-5.0.0-alpha.103-53af3ff7f9-beabe1be30.zip/node_modules/@mui/base/MultiSelectUnstyled/MultiSelectUnstyled.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","unstable_useForkRef","useForkRef","unstable_useControlled","useControlled","flattenOptionGroups","getOptionsFromChildren","useSelect","useSlotProps","PopperUnstyled","SelectUnstyledContext","composeClasses","getSelectUnstyledUtilityClass","defaultOptionStringifier","jsx","_jsx","jsxs","_jsxs","defaultRenderMultipleValues","selectedOptions","Fragment","children","map","o","label","join","defaultFormValueProvider","length","every","value","String","JSON","stringify","useUtilityClasses","ownerState","active","disabled","open","focusVisible","slots","root","listbox","popper","MultiSelectUnstyled","forwardRef","props","forwardedRef","_ref","_slots$listbox","_slots$popper","autoFocus","component","defaultListboxOpen","defaultValue","disabledProp","getSerializedValue","listboxId","listboxOpen","listboxOpenProp","name","onChange","onListboxOpenChange","optionStringifier","renderValue","renderValueProp","slotProps","valueProp","other","groupedOptions","setGroupedOptions","useState","options","useMemo","setListboxOpen","controlled","default","state","useEffect","buttonDefined","setButtonDefined","buttonRef","useRef","listboxRef","Button","ListboxRoot","Popper","handleButtonRefChange","useCallback","element","handleButtonRef","current","focus","handleOpenChange","isOpen","buttonActive","buttonFocusVisible","getButtonProps","getListboxProps","getOptionProps","getOptionState","multiple","onOpenChange","classes","filter","includes","buttonProps","elementType","getSlotProps","externalSlotProps","externalForwardedProps","className","listboxProps","additionalProps","ref","popperProps","anchorEl","disablePortal","placement","role","undefined","context","Provider","type","process","env","NODE_ENV","propTypes","bool","node","array","func","string","shape","oneOfType","object"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"autoFocus\", \"children\", \"component\", \"defaultListboxOpen\", \"defaultValue\", \"disabled\", \"getSerializedValue\", \"listboxId\", \"listboxOpen\", \"name\", \"onChange\", \"onListboxOpenChange\", \"optionStringifier\", \"renderValue\", \"slotProps\", \"slots\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef, unstable_useControlled as useControlled } from '@mui/utils';\nimport { flattenOptionGroups, getOptionsFromChildren } from '../SelectUnstyled/utils';\nimport useSelect from '../SelectUnstyled/useSelect';\nimport { useSlotProps } from '../utils';\nimport PopperUnstyled from '../PopperUnstyled';\nimport { SelectUnstyledContext } from '../SelectUnstyled/SelectUnstyledContext';\nimport composeClasses from '../composeClasses';\nimport { getSelectUnstyledUtilityClass } from '../SelectUnstyled/selectUnstyledClasses';\nimport defaultOptionStringifier from '../SelectUnstyled/defaultOptionStringifier';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction defaultRenderMultipleValues(selectedOptions) {\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: selectedOptions.map(o => o.label).join(', ')\n  });\n}\n\nfunction defaultFormValueProvider(selectedOptions) {\n  if (selectedOptions.length === 0) {\n    return '';\n  }\n\n  if (selectedOptions.every(o => typeof o.value === 'string' || typeof o.value === 'number' || typeof o.value === 'boolean')) {\n    return selectedOptions.map(o => String(o.value));\n  }\n\n  return JSON.stringify(selectedOptions.map(o => o.value));\n}\n\nfunction useUtilityClasses(ownerState) {\n  const {\n    active,\n    disabled,\n    open,\n    focusVisible\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active', open && 'expanded'],\n    listbox: ['listbox', disabled && 'disabled'],\n    popper: ['popper']\n  };\n  return composeClasses(slots, getSelectUnstyledUtilityClass, {});\n}\n/**\n * The foundation for building custom-styled multi-selection select components.\n *\n * Demos:\n *\n * - [Unstyled Select](https://mui.com/base/react-select/)\n *\n * API:\n *\n * - [MultiSelectUnstyled API](https://mui.com/base/api/multi-select-unstyled/)\n */\n\n\nconst MultiSelectUnstyled = /*#__PURE__*/React.forwardRef(function MultiSelectUnstyled(props, forwardedRef) {\n  var _ref, _slots$listbox, _slots$popper;\n\n  const {\n    autoFocus,\n    children,\n    component,\n    defaultListboxOpen = false,\n    defaultValue = [],\n    disabled: disabledProp,\n    getSerializedValue = defaultFormValueProvider,\n    listboxId,\n    listboxOpen: listboxOpenProp,\n    name,\n    onChange,\n    onListboxOpenChange,\n    optionStringifier = defaultOptionStringifier,\n    renderValue: renderValueProp,\n    slotProps = {},\n    slots = {},\n    value: valueProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const renderValue = renderValueProp != null ? renderValueProp : defaultRenderMultipleValues;\n  const [groupedOptions, setGroupedOptions] = React.useState([]);\n  const options = React.useMemo(() => flattenOptionGroups(groupedOptions), [groupedOptions]);\n  const [listboxOpen, setListboxOpen] = useControlled({\n    controlled: listboxOpenProp,\n    default: defaultListboxOpen,\n    name: 'MultiSelectUnstyled',\n    state: 'listboxOpen'\n  });\n  React.useEffect(() => {\n    setGroupedOptions(getOptionsFromChildren(children));\n  }, [children]);\n  const [buttonDefined, setButtonDefined] = React.useState(false);\n  const buttonRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const Button = (_ref = component != null ? component : slots.root) != null ? _ref : 'button';\n  const ListboxRoot = (_slots$listbox = slots.listbox) != null ? _slots$listbox : 'ul';\n  const Popper = (_slots$popper = slots.popper) != null ? _slots$popper : PopperUnstyled;\n  const handleButtonRefChange = React.useCallback(element => {\n    setButtonDefined(element != null);\n  }, []);\n  const handleButtonRef = useForkRef(forwardedRef, buttonRef, handleButtonRefChange);\n  React.useEffect(() => {\n    if (autoFocus) {\n      buttonRef.current.focus();\n    }\n  }, [autoFocus]);\n\n  const handleOpenChange = isOpen => {\n    setListboxOpen(isOpen);\n    onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);\n  };\n\n  const {\n    buttonActive,\n    buttonFocusVisible,\n    disabled,\n    getButtonProps,\n    getListboxProps,\n    getOptionProps,\n    getOptionState,\n    value\n  } = useSelect({\n    buttonRef: handleButtonRef,\n    defaultValue,\n    disabled: disabledProp,\n    listboxId,\n    multiple: true,\n    onChange,\n    onOpenChange: handleOpenChange,\n    open: listboxOpen,\n    options,\n    optionStringifier,\n    value: valueProp\n  });\n\n  const ownerState = _extends({}, props, {\n    active: buttonActive,\n    defaultListboxOpen,\n    disabled,\n    focusVisible: buttonFocusVisible,\n    open: listboxOpen,\n    renderValue,\n    value\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const selectedOptions = React.useMemo(() => {\n    if (value == null) {\n      return [];\n    }\n\n    return options.filter(o => value.includes(o.value));\n  }, [options, value]);\n  const buttonProps = useSlotProps({\n    elementType: Button,\n    getSlotProps: getButtonProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    ownerState,\n    className: classes.root\n  });\n  const listboxProps = useSlotProps({\n    elementType: ListboxRoot,\n    getSlotProps: getListboxProps,\n    externalSlotProps: slotProps.listbox,\n    additionalProps: {\n      ref: listboxRef\n    },\n    ownerState,\n    className: classes.listbox\n  });\n  const popperProps = useSlotProps({\n    elementType: Popper,\n    externalSlotProps: slotProps.popper,\n    additionalProps: {\n      anchorEl: buttonRef.current,\n      disablePortal: true,\n      open: listboxOpen,\n      placement: 'bottom-start',\n      role: undefined\n    },\n    ownerState,\n    className: classes.popper\n  });\n  const context = {\n    getOptionProps,\n    getOptionState,\n    listboxRef\n  };\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Button, _extends({}, buttonProps, {\n      children: renderValue(selectedOptions)\n    })), buttonDefined && /*#__PURE__*/_jsx(Popper, _extends({}, popperProps, {\n      children: /*#__PURE__*/_jsx(ListboxRoot, _extends({}, listboxProps, {\n        children: /*#__PURE__*/_jsx(SelectUnstyledContext.Provider, {\n          value: context,\n          children: children\n        })\n      }))\n    })), name && /*#__PURE__*/_jsx(\"input\", {\n      type: \"hidden\",\n      name: name,\n      value: getSerializedValue(selectedOptions)\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? MultiSelectUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the select element is focused during the first mount\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the select will be initially open.\n   * @default false\n   */\n  defaultListboxOpen: PropTypes.bool,\n\n  /**\n   * The default selected values. Use when the component is not controlled.\n   * @default []\n   */\n  defaultValue: PropTypes.array,\n\n  /**\n   * If `true`, the select is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * A function to convert the currently selected values to a type accepted by HTML input.\n   * Used to set a value of a hidden input associated with the select,\n   * so that the selected values can be posted with a form.\n   */\n  getSerializedValue: PropTypes.func,\n\n  /**\n   * `id` attribute of the listbox element.\n   * Also used to derive the `id` attributes of options.\n   */\n  listboxId: PropTypes.string,\n\n  /**\n   * Controls the open state of the select's listbox.\n   * @default undefined\n   */\n  listboxOpen: PropTypes.bool,\n\n  /**\n   * Name of the element. For example used by the server to identify the fields in form submits.\n   * If the name is provided, the component will render a hidden input element that can be submitted to a server.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when an option is selected.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see listboxOpen).\n   */\n  onListboxOpenChange: PropTypes.func,\n\n  /**\n   * A function used to convert the option label to a string.\n   * It's useful when labels are elements and need to be converted to plain text\n   * to enable navigation using character keys on a keyboard.\n   *\n   * @default defaultOptionStringifier\n   */\n  optionStringifier: PropTypes.func,\n\n  /**\n   * Function that customizes the rendering of the selected values.\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * The props used for each slot inside the MultiSelect.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the MultiSelect.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .shape({\n    listbox: PropTypes.elementType,\n    popper: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n\n  /**\n   * The selected values.\n   * Set to an empty array to deselect all options.\n   */\n  value: PropTypes.array\n} : void 0;\nexport default MultiSelectUnstyled;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\ipfs\\\\cluster-webui\\\\client\\\\src\\\\components\\\\PeerList.tsx\",\n    _s = $RefreshSig$();\n\nimport ReplayIcon from '@mui/icons-material/Replay';\nimport { Card, CardActions, CardContent, CardHeader, CircularProgress, IconButton, Table, TableBody, TableCell, TableHead, TableRow } from '@mui/material';\nimport { useSnackbar } from 'notistack';\nimport { useEffect, useState } from 'react';\nimport { useApi } from '../context/ApiContext';\nimport { useLoading } from '../hooks/UseLoading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PeerList = props => {\n  _s();\n\n  const [peers, setPeers] = useState([]);\n  const [isLoading, load] = useLoading();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const api = useApi();\n\n  const reload = () => {\n    load(api.getPeers()).then(setPeers).catch(e => {\n      enqueueSnackbar(`Error: ${e}`, {\n        variant: 'error'\n      });\n    });\n  }; //eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n  useEffect(reload, []);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      title: 'Peers',\n      subheader: `${isLoading ? '?' : peers.length} peers`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n      children: /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: reload,\n        children: /*#__PURE__*/_jsxDEV(ReplayIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        width: '100%',\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"IPFS ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Version\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 6\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: isLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 19\n          }, this) : peers.map((peer, k) => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: peer.peername\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: peer.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: peer.ipfs.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: peer.version\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 7\n            }, this)]\n          }, k, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 64\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PeerList, \"1G9+WWOwY//P+ylGX82OWmbiSB4=\", false, function () {\n  return [useLoading, useSnackbar, useApi];\n});\n\n_c = PeerList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PeerList\");","map":{"version":3,"sources":["D:/ipfs/cluster-webui/client/src/components/PeerList.tsx"],"names":["ReplayIcon","Card","CardActions","CardContent","CardHeader","CircularProgress","IconButton","Table","TableBody","TableCell","TableHead","TableRow","useSnackbar","useEffect","useState","useApi","useLoading","PeerList","props","peers","setPeers","isLoading","load","enqueueSnackbar","api","reload","getPeers","then","catch","e","variant","length","map","peer","k","peername","id","ipfs","version"],"mappings":"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","sourcesContent":["import ReplayIcon from '@mui/icons-material/Replay';\r\nimport {\r\n\tCard,\r\n\tCardActions,\r\n\tCardContent,\r\n\tCardHeader,\r\n\tCircularProgress,\r\n\tIconButton,\r\n\tTable,\r\n\tTableBody,\r\n\tTableCell,\r\n\tTableHead,\r\n\tTableRow,\r\n} from '@mui/material';\r\nimport {useSnackbar} from 'notistack';\r\nimport {useEffect, useState} from 'react';\r\nimport {useApi} from '../context/ApiContext';\r\nimport {useLoading} from '../hooks/UseLoading';\r\n\r\nexport const PeerList = (props: any) => {\r\n\tconst [peers, setPeers] = useState<any[]>([]);\r\n\tconst [isLoading, load] = useLoading();\r\n\tconst {enqueueSnackbar} = useSnackbar();\r\n\tconst api = useApi();\r\n\r\n\tconst reload = () => {\r\n\t\tload(api.getPeers())\r\n\t\t\t.then(setPeers)\r\n\t\t\t.catch(e => {\r\n\t\t\t\tenqueueSnackbar(`Error: ${e}`, {variant: 'error'});\r\n\t\t\t});\r\n\t};\r\n\r\n\t//eslint-disable-next-line react-hooks/exhaustive-deps\r\n\tuseEffect(reload, []);\r\n\r\n\treturn <Card>\r\n\t\t<CardHeader title={'Peers'} subheader={`${isLoading ? '?' : peers.length} peers`}/>\r\n\t\t<CardActions>\r\n\t\t\t<IconButton onClick={reload}><ReplayIcon/></IconButton>\r\n\t\t</CardActions>\r\n\t\t<CardContent>\r\n\t\t\t<Table width={'100%'}>\r\n\t\t\t\t<TableHead>\r\n\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t<TableCell>Name</TableCell>\r\n\t\t\t\t\t\t<TableCell>ID</TableCell>\r\n\t\t\t\t\t\t<TableCell>IPFS ID</TableCell>\r\n\t\t\t\t\t\t<TableCell>Version</TableCell>\r\n\t\t\t\t\t</TableRow>\r\n\t\t\t\t</TableHead>\r\n\t\t\t\t<TableBody>\r\n\t\t\t\t\t{isLoading ? <CircularProgress/> : peers.map((peer, k) => <TableRow key={k}>\r\n\t\t\t\t\t\t<TableCell>{peer.peername}</TableCell>\r\n\t\t\t\t\t\t<TableCell>{peer.id}</TableCell>\r\n\t\t\t\t\t\t<TableCell>{peer.ipfs.id}</TableCell>\r\n\t\t\t\t\t\t<TableCell>{peer.version}</TableCell>\r\n\t\t\t\t\t</TableRow>)}\r\n\t\t\t\t</TableBody>\r\n\t\t\t</Table>\r\n\t\t</CardContent>\r\n\t</Card>;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
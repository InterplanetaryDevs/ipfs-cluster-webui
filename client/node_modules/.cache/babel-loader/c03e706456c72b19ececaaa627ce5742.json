{"ast":null,"code":"var _jsxFileName = \"D:\\\\ipfs\\\\cluster-webui\\\\client\\\\src\\\\context\\\\ApiContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useMemo } from 'react';\nimport { ApiService } from './ApiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ApiContext = /*#__PURE__*/createContext({});\nexport const ApiContextProvider = props => {\n  _s();\n\n  const context = useMemo(() => new ApiService(), []);\n  return /*#__PURE__*/_jsxDEV(ApiContext.Provider, {\n    value: context,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ApiContextProvider, \"5O8ij4BBqEa+dP2kIvnsZK/gTzU=\");\n\n_c = ApiContextProvider;\nexport const useApi = () => {\n  _s2();\n\n  return useContext(ApiContext);\n};\n\n_s2(useApi, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ApiContextProvider\");","map":{"version":3,"sources":["D:/ipfs/cluster-webui/client/src/context/ApiContext.tsx"],"names":["createContext","useContext","useMemo","ApiService","ApiContext","ApiContextProvider","props","context","children","useApi"],"mappings":";;;;AAAA,SAAQA,aAAR,EAAuBC,UAAvB,EAAmCC,OAAnC,QAAiD,OAAjD;AAEA,SAAQC,UAAR,QAAyB,cAAzB;;AAEA,MAAMC,UAAU,gBAAGJ,aAAa,CAAC,EAAD,CAAhC;AAsBA,OAAO,MAAMK,kBAAkB,GAAIC,KAAD,IAAgB;AAAA;;AACjD,QAAMC,OAAO,GAAGL,OAAO,CAAC,MAAM,IAAIC,UAAJ,EAAP,EAAyB,EAAzB,CAAvB;AAEA,sBAAO,QAAC,UAAD,CAAY,QAAZ;AACN,IAAA,KAAK,EAAEI,OADD;AAAA,cAGLD,KAAK,CAACE;AAHD;AAAA;AAAA;AAAA;AAAA,UAAP;AAKA,CARM;;GAAMH,kB;;KAAAA,kB;AAUb,OAAO,MAAMI,MAAM,GAAG;AAAA;;AAAA,SAAMR,UAAU,CAACG,UAAD,CAAhB;AAAA,CAAf;;IAAMK,M","sourcesContent":["import {createContext, useContext, useMemo} from 'react';\r\nimport {PinOptions} from '../types/PinOptions';\r\nimport {ApiService} from './ApiService';\r\n\r\nconst ApiContext = createContext({} as IApiContext);\r\n\r\nexport interface IApiContext {\r\n\tgetId(): Promise<any>;\r\n\r\n\tgetList(): Promise<any>\r\n\r\n\tupdate(from: string, to: string, options: PinOptions): Promise<void>\r\n\r\n\tstatus(cid: string): Promise<any>\r\n\r\n\tadd(cid: string, options: PinOptions): Promise<any>\r\n\r\n\tremove(cid: string): Promise<void>\r\n\r\n\tgetPeers(): Promise<any>\r\n\r\n\tset apiUrl(url: string);\r\n\r\n\tget apiUrl();\r\n}\r\n\r\nexport const ApiContextProvider = (props: any) => {\r\n\tconst context = useMemo(() => new ApiService(), [])\r\n\r\n\treturn <ApiContext.Provider\r\n\t\tvalue={context}\r\n\t>\r\n\t\t{props.children}\r\n\t</ApiContext.Provider>;\r\n};\r\n\r\nexport const useApi = () => useContext(ApiContext);\r\n"]},"metadata":{},"sourceType":"module"}
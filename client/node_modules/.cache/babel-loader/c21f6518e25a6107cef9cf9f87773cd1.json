{"ast":null,"code":"var _jsxFileName = \"D:\\\\ipfs\\\\cluster-webui\\\\client\\\\src\\\\components\\\\IdentityDisplay.tsx\",\n    _s = $RefreshSig$();\n\nimport { Card, CardActions, CardContent, CardHeader, CircularProgress, IconButton, List, ListItem, ListItemText } from '@mui/material';\nimport { useSnackbar } from 'notistack';\nimport { useEffect, useState } from 'react';\nimport ReplayIcon from '@mui/icons-material/Replay';\nimport { useApi } from '../context/ApiContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const IdentityDisplay = props => {\n  _s();\n\n  const [identity, setIdentity] = useState();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const api = useApi();\n\n  const reload = () => {\n    api.getId().then(setIdentity).catch(e => {\n      enqueueSnackbar(e, {\n        variant: 'error'\n      });\n    });\n  }; //eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n  useEffect(reload, []);\n  return identity ? /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      title: identity.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n      children: /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: reload,\n        children: /*#__PURE__*/_jsxDEV(ReplayIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n      children: /*#__PURE__*/_jsxDEV(List, {\n        children: [/*#__PURE__*/_jsxDEV(ListItem, {\n          children: /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: 'Addresses',\n            secondary: /*#__PURE__*/_jsxDEV(List, {\n              children: identity.addresses.map((v, k) => /*#__PURE__*/_jsxDEV(ListItem, {\n                children: v\n              }, k, false, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 58\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 18\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 6\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n          children: /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: 'Peers',\n            secondary: /*#__PURE__*/_jsxDEV(List, {\n              children: identity.cluster_peers.map((v, k) => /*#__PURE__*/_jsxDEV(ListItem, {\n                children: v\n              }, k, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 62\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 18\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 6\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n          children: /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: 'IPFS ID',\n            secondary: identity.ipfs.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 6\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n          children: /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: 'IPFS addresses',\n            secondary: /*#__PURE__*/_jsxDEV(List, {\n              children: identity.ipfs.addresses.map((v, k) => /*#__PURE__*/_jsxDEV(ListItem, {\n                children: v\n              }, k, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 63\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 18\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 6\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 20\n  }, this) : /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 12\n  }, this);\n};\n\n_s(IdentityDisplay, \"7Su8EKZtVU9yV7qd+r0y16GG5hQ=\", false, function () {\n  return [useSnackbar, useApi];\n});\n\n_c = IdentityDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"IdentityDisplay\");","map":{"version":3,"sources":["D:/ipfs/cluster-webui/client/src/components/IdentityDisplay.tsx"],"names":["Card","CardActions","CardContent","CardHeader","CircularProgress","IconButton","List","ListItem","ListItemText","useSnackbar","useEffect","useState","ReplayIcon","useApi","IdentityDisplay","props","identity","setIdentity","enqueueSnackbar","api","reload","getId","then","catch","e","variant","id","addresses","map","v","k","cluster_peers","ipfs"],"mappings":"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","sourcesContent":["import {\r\n\tCard,\r\n\tCardActions,\r\n\tCardContent,\r\n\tCardHeader,\r\n\tCircularProgress,\r\n\tIconButton,\r\n\tList,\r\n\tListItem,\r\n\tListItemText,\r\n} from '@mui/material';\r\nimport {useSnackbar} from 'notistack';\r\nimport {useEffect, useState} from 'react';\r\nimport ReplayIcon from '@mui/icons-material/Replay';\r\nimport {useApi} from '../context/ApiContext';\r\n\r\nexport const IdentityDisplay = (props: any) => {\r\n\tconst [identity, setIdentity] = useState<any>();\r\n\tconst {enqueueSnackbar} = useSnackbar()\r\n\tconst api = useApi()\r\n\r\n\tconst reload = () => {\r\n\t\tapi.getId()\r\n\t\t\t.then(setIdentity)\r\n\t\t\t.catch(e => {\r\n\t\t\t\tenqueueSnackbar(e, {variant: 'error'});\r\n\t\t\t});\r\n\t};\r\n\r\n\t//eslint-disable-next-line react-hooks/exhaustive-deps\r\n\tuseEffect(reload, []);\r\n\r\n\treturn identity ? <Card>\r\n\t\t<CardHeader title={identity.id}/>\r\n\t\t<CardActions>\r\n\t\t\t<IconButton onClick={reload}><ReplayIcon/></IconButton>\r\n\t\t</CardActions>\r\n\t\t<CardContent>\r\n\t\t\t<List>\r\n\t\t\t\t<ListItem>\r\n\t\t\t\t\t<ListItemText\r\n\t\t\t\t\t\tprimary={'Addresses'}\r\n\t\t\t\t\t\tsecondary={<List>\r\n\t\t\t\t\t\t\t{identity.addresses.map((v: string, k: number) => <ListItem key={k}>{v}</ListItem>)}\r\n\t\t\t\t\t\t</List>}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</ListItem>\r\n\t\t\t\t<ListItem>\r\n\t\t\t\t\t<ListItemText\r\n\t\t\t\t\t\tprimary={'Peers'}\r\n\t\t\t\t\t\tsecondary={<List>\r\n\t\t\t\t\t\t\t{identity.cluster_peers.map((v: string, k: number) => <ListItem key={k}>{v}</ListItem>)}\r\n\t\t\t\t\t\t</List>}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</ListItem>\r\n\t\t\t\t<ListItem>\r\n\t\t\t\t\t<ListItemText\r\n\t\t\t\t\t\tprimary={'IPFS ID'}\r\n\t\t\t\t\t\tsecondary={identity.ipfs.id}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</ListItem>\r\n\t\t\t\t<ListItem>\r\n\t\t\t\t\t<ListItemText\r\n\t\t\t\t\t\tprimary={'IPFS addresses'}\r\n\t\t\t\t\t\tsecondary={<List>\r\n\t\t\t\t\t\t\t{identity.ipfs.addresses.map((v: string, k: number) => <ListItem key={k}>{v}</ListItem>)}\r\n\t\t\t\t\t\t</List>}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</ListItem>\r\n\t\t\t</List>\r\n\t\t\t{/*<pre>{JSON.stringify(identity, null, 2)}</pre>*/}\r\n\t\t</CardContent>\r\n\t</Card> : <CircularProgress/>;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
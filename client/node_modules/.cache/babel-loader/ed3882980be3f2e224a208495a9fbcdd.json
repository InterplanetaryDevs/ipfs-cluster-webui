{"ast":null,"code":"'use strict';\n\nimport utils from './../utils.js';\nimport buildURL from '../helpers/buildURL.js';\nimport InterceptorManager from './InterceptorManager.js';\nimport dispatchRequest from './dispatchRequest.js';\nimport mergeConfig from './mergeConfig.js';\nimport buildFullPath from './buildFullPath.js';\nimport validator from '../helpers/validator.js';\nimport AxiosHeaders from './AxiosHeaders.js';\nconst validators = validator.validators;\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\n\nclass Axios {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig;\n    this.interceptors = {\n      request: new InterceptorManager(),\n      response: new InterceptorManager()\n    };\n  }\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n\n\n  request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/\n    // Allow for axios('example/url'[, config]) a la fetch API\n    if (typeof configOrUrl === 'string') {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n\n    config = mergeConfig(this.defaults, config);\n    const {\n      transitional,\n      paramsSerializer\n    } = config;\n\n    if (transitional !== undefined) {\n      validator.assertOptions(transitional, {\n        silentJSONParsing: validators.transitional(validators.boolean),\n        forcedJSONParsing: validators.transitional(validators.boolean),\n        clarifyTimeoutError: validators.transitional(validators.boolean)\n      }, false);\n    }\n\n    if (paramsSerializer !== undefined) {\n      validator.assertOptions(paramsSerializer, {\n        encode: validators.function,\n        serialize: validators.function\n      }, true);\n    } // Set config.method\n\n\n    config.method = (config.method || this.defaults.method || 'get').toLowerCase(); // Flatten headers\n\n    const defaultHeaders = config.headers && utils.merge(config.headers.common, config.headers[config.method]);\n    defaultHeaders && utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    });\n    config.headers = new AxiosHeaders(config.headers, defaultHeaders); // filter out skipped interceptors\n\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n        return;\n      }\n\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n    let promise;\n    let i = 0;\n    let len;\n\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), undefined];\n      chain.unshift.apply(chain, requestInterceptorChain);\n      chain.push.apply(chain, responseInterceptorChain);\n      len = chain.length;\n      promise = Promise.resolve(config);\n\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n\n      return promise;\n    }\n\n    len = requestInterceptorChain.length;\n    let newConfig = config;\n    i = 0;\n\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    i = 0;\n    len = responseInterceptorChain.length;\n\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n\n    return promise;\n  }\n\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n\n} // Provide aliases for supported request methods\n\n\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function (url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\nexport default Axios;","map":{"version":3,"sources":["D:/ipfs/cluster-webui/.yarn/cache/axios-npm-1.1.3-4b63965ac1-cab3b17bf6.zip/node_modules/axios/lib/core/Axios.js"],"names":["utils","buildURL","InterceptorManager","dispatchRequest","mergeConfig","buildFullPath","validator","AxiosHeaders","validators","Axios","constructor","instanceConfig","defaults","interceptors","request","response","configOrUrl","config","url","transitional","paramsSerializer","undefined","assertOptions","silentJSONParsing","boolean","forcedJSONParsing","clarifyTimeoutError","encode","function","serialize","method","toLowerCase","defaultHeaders","headers","merge","common","forEach","cleanHeaderConfig","requestInterceptorChain","synchronousRequestInterceptors","unshiftRequestInterceptors","interceptor","runWhen","synchronous","unshift","fulfilled","rejected","responseInterceptorChain","pushResponseInterceptors","push","promise","i","len","chain","bind","apply","length","Promise","resolve","then","newConfig","onFulfilled","onRejected","error","call","reject","getUri","fullPath","baseURL","params","forEachMethodNoData","prototype","data","forEachMethodWithData","generateHTTPMethod","isForm","httpMethod"],"mappings":"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","sourcesContent":["'use strict';\n\nimport utils from './../utils.js';\nimport buildURL from '../helpers/buildURL.js';\nimport InterceptorManager from './InterceptorManager.js';\nimport dispatchRequest from './dispatchRequest.js';\nimport mergeConfig from './mergeConfig.js';\nimport buildFullPath from './buildFullPath.js';\nimport validator from '../helpers/validator.js';\nimport AxiosHeaders from './AxiosHeaders.js';\n\nconst validators = validator.validators;\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\nclass Axios {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig;\n    this.interceptors = {\n      request: new InterceptorManager(),\n      response: new InterceptorManager()\n    };\n  }\n\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n  request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/\n    // Allow for axios('example/url'[, config]) a la fetch API\n    if (typeof configOrUrl === 'string') {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n\n    config = mergeConfig(this.defaults, config);\n\n    const {transitional, paramsSerializer} = config;\n\n    if (transitional !== undefined) {\n      validator.assertOptions(transitional, {\n        silentJSONParsing: validators.transitional(validators.boolean),\n        forcedJSONParsing: validators.transitional(validators.boolean),\n        clarifyTimeoutError: validators.transitional(validators.boolean)\n      }, false);\n    }\n\n    if (paramsSerializer !== undefined) {\n      validator.assertOptions(paramsSerializer, {\n        encode: validators.function,\n        serialize: validators.function\n      }, true);\n    }\n\n    // Set config.method\n    config.method = (config.method || this.defaults.method || 'get').toLowerCase();\n\n    // Flatten headers\n    const defaultHeaders = config.headers && utils.merge(\n      config.headers.common,\n      config.headers[config.method]\n    );\n\n    defaultHeaders && utils.forEach(\n      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n      function cleanHeaderConfig(method) {\n        delete config.headers[method];\n      }\n    );\n\n    config.headers = new AxiosHeaders(config.headers, defaultHeaders);\n\n    // filter out skipped interceptors\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n        return;\n      }\n\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    let promise;\n    let i = 0;\n    let len;\n\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), undefined];\n      chain.unshift.apply(chain, requestInterceptorChain);\n      chain.push.apply(chain, responseInterceptorChain);\n      len = chain.length;\n\n      promise = Promise.resolve(config);\n\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n\n      return promise;\n    }\n\n    len = requestInterceptorChain.length;\n\n    let newConfig = config;\n\n    i = 0;\n\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    i = 0;\n    len = responseInterceptorChain.length;\n\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n\n    return promise;\n  }\n\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n}\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\n\nexport default Axios;\n"]},"metadata":{},"sourceType":"module"}